# coding: utf-8

"""
    Kubeflow Katib OpenAPI Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kubeflow_katib_api.models.v1beta1_algorithm_spec import V1beta1AlgorithmSpec
from kubeflow_katib_api.models.v1beta1_early_stopping_spec import V1beta1EarlyStoppingSpec
from kubeflow_katib_api.models.v1beta1_metrics_collector_spec import V1beta1MetricsCollectorSpec
from kubeflow_katib_api.models.v1beta1_nas_config import V1beta1NasConfig
from kubeflow_katib_api.models.v1beta1_objective_spec import V1beta1ObjectiveSpec
from kubeflow_katib_api.models.v1beta1_parameter_spec import V1beta1ParameterSpec
from kubeflow_katib_api.models.v1beta1_trial_template import V1beta1TrialTemplate
from typing import Optional, Set
from typing_extensions import Self

class V1beta1ExperimentSpec(BaseModel):
    """
    ExperimentSpec is the specification of an Experiment.
    """ # noqa: E501
    algorithm: Optional[V1beta1AlgorithmSpec] = Field(default=None, description="Describes the suggestion algorithm.")
    early_stopping: Optional[V1beta1EarlyStoppingSpec] = Field(default=None, description="Describes the early stopping algorithm.", alias="earlyStopping")
    max_failed_trial_count: Optional[StrictInt] = Field(default=None, description="Max failed trials to mark experiment as failed.", alias="maxFailedTrialCount")
    max_trial_count: Optional[StrictInt] = Field(default=None, description="Max completed trials to mark experiment as succeeded", alias="maxTrialCount")
    metrics_collector_spec: Optional[V1beta1MetricsCollectorSpec] = Field(default=None, description="Describes the specification of the metrics collector", alias="metricsCollectorSpec")
    nas_config: Optional[V1beta1NasConfig] = Field(default=None, alias="nasConfig")
    objective: Optional[V1beta1ObjectiveSpec] = Field(default=None, description="Describes the objective of the experiment.")
    parallel_trial_count: Optional[StrictInt] = Field(default=None, description="How many trials can be processed in parallel. Defaults to 3", alias="parallelTrialCount")
    parameters: Optional[List[V1beta1ParameterSpec]] = Field(default=None, description="List of hyperparameter configurations.")
    resume_policy: Optional[StrictStr] = Field(default=None, description="Describes resuming policy which usually take effect after experiment terminated. Default value is Never.", alias="resumePolicy")
    trial_template: Optional[V1beta1TrialTemplate] = Field(default=None, description="Template for each run of the trial.", alias="trialTemplate")
    __properties: ClassVar[List[str]] = ["algorithm", "earlyStopping", "maxFailedTrialCount", "maxTrialCount", "metricsCollectorSpec", "nasConfig", "objective", "parallelTrialCount", "parameters", "resumePolicy", "trialTemplate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1ExperimentSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of algorithm
        if self.algorithm:
            _dict['algorithm'] = self.algorithm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of early_stopping
        if self.early_stopping:
            _dict['earlyStopping'] = self.early_stopping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metrics_collector_spec
        if self.metrics_collector_spec:
            _dict['metricsCollectorSpec'] = self.metrics_collector_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nas_config
        if self.nas_config:
            _dict['nasConfig'] = self.nas_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of objective
        if self.objective:
            _dict['objective'] = self.objective.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of trial_template
        if self.trial_template:
            _dict['trialTemplate'] = self.trial_template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1ExperimentSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithm": V1beta1AlgorithmSpec.from_dict(obj["algorithm"]) if obj.get("algorithm") is not None else None,
            "earlyStopping": V1beta1EarlyStoppingSpec.from_dict(obj["earlyStopping"]) if obj.get("earlyStopping") is not None else None,
            "maxFailedTrialCount": obj.get("maxFailedTrialCount"),
            "maxTrialCount": obj.get("maxTrialCount"),
            "metricsCollectorSpec": V1beta1MetricsCollectorSpec.from_dict(obj["metricsCollectorSpec"]) if obj.get("metricsCollectorSpec") is not None else None,
            "nasConfig": V1beta1NasConfig.from_dict(obj["nasConfig"]) if obj.get("nasConfig") is not None else None,
            "objective": V1beta1ObjectiveSpec.from_dict(obj["objective"]) if obj.get("objective") is not None else None,
            "parallelTrialCount": obj.get("parallelTrialCount"),
            "parameters": [V1beta1ParameterSpec.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "resumePolicy": obj.get("resumePolicy"),
            "trialTemplate": V1beta1TrialTemplate.from_dict(obj["trialTemplate"]) if obj.get("trialTemplate") is not None else None
        })
        return _obj


