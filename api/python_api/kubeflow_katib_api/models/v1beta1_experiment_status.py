# coding: utf-8

"""
    Kubeflow Katib OpenAPI Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kubeflow_katib_api.models.v1beta1_experiment_condition import V1beta1ExperimentCondition
from kubeflow_katib_api.models.v1beta1_optimal_trial import V1beta1OptimalTrial
from typing import Optional, Set
from typing_extensions import Self

class V1beta1ExperimentStatus(BaseModel):
    """
    ExperimentStatus is the current status of an Experiment.
    """ # noqa: E501
    completion_time: Optional[datetime] = Field(default=None, description="Represents time when the Experiment was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.", alias="completionTime")
    conditions: Optional[List[V1beta1ExperimentCondition]] = Field(default=None, description="List of observed runtime conditions for this Experiment.")
    current_optimal_trial: Optional[V1beta1OptimalTrial] = Field(default=None, description="Current optimal trial parameters and observations.", alias="currentOptimalTrial")
    early_stopped_trial_list: Optional[List[StrictStr]] = Field(default=None, description="List of trial names which have been early stopped.", alias="earlyStoppedTrialList")
    failed_trial_list: Optional[List[StrictStr]] = Field(default=None, description="List of trial names which have already failed.", alias="failedTrialList")
    killed_trial_list: Optional[List[StrictStr]] = Field(default=None, description="List of trial names which have been killed.", alias="killedTrialList")
    last_reconcile_time: Optional[datetime] = Field(default=None, description="Represents last time when the Experiment was reconciled. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.", alias="lastReconcileTime")
    metrics_unavailable_trial_list: Optional[List[StrictStr]] = Field(default=None, description="List of trial names which have been metrics unavailable", alias="metricsUnavailableTrialList")
    pending_trial_list: Optional[List[StrictStr]] = Field(default=None, description="List of trial names which are pending.", alias="pendingTrialList")
    running_trial_list: Optional[List[StrictStr]] = Field(default=None, description="List of trial names which are running.", alias="runningTrialList")
    start_time: Optional[datetime] = Field(default=None, description="Represents time when the Experiment was acknowledged by the Experiment controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.", alias="startTime")
    succeeded_trial_list: Optional[List[StrictStr]] = Field(default=None, description="List of trial names which have already succeeded.", alias="succeededTrialList")
    trial_metrics_unavailable: Optional[StrictInt] = Field(default=None, description="How many trials are currently metrics unavailable.", alias="trialMetricsUnavailable")
    trials: Optional[StrictInt] = Field(default=None, description="Trials is the total number of trials owned by the experiment.")
    trials_early_stopped: Optional[StrictInt] = Field(default=None, description="How many trials are currently early stopped.", alias="trialsEarlyStopped")
    trials_failed: Optional[StrictInt] = Field(default=None, description="How many trials have failed.", alias="trialsFailed")
    trials_killed: Optional[StrictInt] = Field(default=None, description="How many trials have been killed.", alias="trialsKilled")
    trials_pending: Optional[StrictInt] = Field(default=None, description="How many trials are currently pending.", alias="trialsPending")
    trials_running: Optional[StrictInt] = Field(default=None, description="How many trials are currently running.", alias="trialsRunning")
    trials_succeeded: Optional[StrictInt] = Field(default=None, description="How many trials have succeeded.", alias="trialsSucceeded")
    __properties: ClassVar[List[str]] = ["completionTime", "conditions", "currentOptimalTrial", "earlyStoppedTrialList", "failedTrialList", "killedTrialList", "lastReconcileTime", "metricsUnavailableTrialList", "pendingTrialList", "runningTrialList", "startTime", "succeededTrialList", "trialMetricsUnavailable", "trials", "trialsEarlyStopped", "trialsFailed", "trialsKilled", "trialsPending", "trialsRunning", "trialsSucceeded"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1ExperimentStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of current_optimal_trial
        if self.current_optimal_trial:
            _dict['currentOptimalTrial'] = self.current_optimal_trial.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1ExperimentStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "completionTime": obj.get("completionTime"),
            "conditions": [V1beta1ExperimentCondition.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "currentOptimalTrial": V1beta1OptimalTrial.from_dict(obj["currentOptimalTrial"]) if obj.get("currentOptimalTrial") is not None else None,
            "earlyStoppedTrialList": obj.get("earlyStoppedTrialList"),
            "failedTrialList": obj.get("failedTrialList"),
            "killedTrialList": obj.get("killedTrialList"),
            "lastReconcileTime": obj.get("lastReconcileTime"),
            "metricsUnavailableTrialList": obj.get("metricsUnavailableTrialList"),
            "pendingTrialList": obj.get("pendingTrialList"),
            "runningTrialList": obj.get("runningTrialList"),
            "startTime": obj.get("startTime"),
            "succeededTrialList": obj.get("succeededTrialList"),
            "trialMetricsUnavailable": obj.get("trialMetricsUnavailable"),
            "trials": obj.get("trials"),
            "trialsEarlyStopped": obj.get("trialsEarlyStopped"),
            "trialsFailed": obj.get("trialsFailed"),
            "trialsKilled": obj.get("trialsKilled"),
            "trialsPending": obj.get("trialsPending"),
            "trialsRunning": obj.get("trialsRunning"),
            "trialsSucceeded": obj.get("trialsSucceeded")
        })
        return _obj


