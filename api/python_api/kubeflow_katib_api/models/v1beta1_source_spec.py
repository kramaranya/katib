# coding: utf-8

"""
    Kubeflow Katib OpenAPI Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from kubeflow_katib_api.models.io_k8s_api_core_v1_http_get_action import IoK8sApiCoreV1HTTPGetAction
from kubeflow_katib_api.models.v1beta1_file_system_path import V1beta1FileSystemPath
from kubeflow_katib_api.models.v1beta1_filter_spec import V1beta1FilterSpec
from typing import Optional, Set
from typing_extensions import Self

class V1beta1SourceSpec(BaseModel):
    """
    V1beta1SourceSpec
    """ # noqa: E501
    file_system_path: Optional[V1beta1FileSystemPath] = Field(default=None, description="During training model, metrics may be persisted into local file in source code, such as tfEvent use case", alias="fileSystemPath")
    filter: Optional[V1beta1FilterSpec] = Field(default=None, description="Default metric output format is {\"metric\": \"<metric_name>\", \"value\": <int_or_float>, \"epoch\": <int>, \"step\": <int>}, but if the output doesn't follow default format, please extend it here")
    http_get: Optional[IoK8sApiCoreV1HTTPGetAction] = Field(default=None, description="Model-train source code can expose metrics by http, such as HTTP endpoint in prometheus metric format", alias="httpGet")
    __properties: ClassVar[List[str]] = ["fileSystemPath", "filter", "httpGet"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1SourceSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file_system_path
        if self.file_system_path:
            _dict['fileSystemPath'] = self.file_system_path.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of http_get
        if self.http_get:
            _dict['httpGet'] = self.http_get.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1SourceSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fileSystemPath": V1beta1FileSystemPath.from_dict(obj["fileSystemPath"]) if obj.get("fileSystemPath") is not None else None,
            "filter": V1beta1FilterSpec.from_dict(obj["filter"]) if obj.get("filter") is not None else None,
            "httpGet": IoK8sApiCoreV1HTTPGetAction.from_dict(obj["httpGet"]) if obj.get("httpGet") is not None else None
        })
        return _obj


