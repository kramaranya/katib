# coding: utf-8

"""
    Kubeflow Katib OpenAPI Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from kubeflow_katib_api.models.v1beta1_metric_strategy import V1beta1MetricStrategy
from typing import Optional, Set
from typing_extensions import Self

class V1beta1ObjectiveSpec(BaseModel):
    """
    ObjectiveSpec represents Experiment's objective specification.
    """ # noqa: E501
    additional_metric_names: Optional[List[StrictStr]] = Field(default=None, description="AdditionalMetricNames represents metrics that should be collected from Trials. This can be empty if we only care about the objective metric. Note: If we adopt a push instead of pull mechanism, this can be omitted completely.", alias="additionalMetricNames")
    goal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Goal is the Experiment's objective goal that should be reached. In case of empty goal, Experiment is running until MaxTrialCount = TrialsSucceeded.")
    metric_strategies: Optional[List[V1beta1MetricStrategy]] = Field(default=None, description="MetricStrategies defines various rules (min, max or latest) to extract metrics values. This field is allowed to missing, experiment defaulter (webhook) will fill it.", alias="metricStrategies")
    objective_metric_name: Optional[StrictStr] = Field(default=None, description="ObjectiveMetricName represents primary Experiment's metric to optimize.", alias="objectiveMetricName")
    type: Optional[StrictStr] = Field(default=None, description="Type for Experiment optimization.")
    __properties: ClassVar[List[str]] = ["additionalMetricNames", "goal", "metricStrategies", "objectiveMetricName", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1ObjectiveSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metric_strategies (list)
        _items = []
        if self.metric_strategies:
            for _item_metric_strategies in self.metric_strategies:
                if _item_metric_strategies:
                    _items.append(_item_metric_strategies.to_dict())
            _dict['metricStrategies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1ObjectiveSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalMetricNames": obj.get("additionalMetricNames"),
            "goal": obj.get("goal"),
            "metricStrategies": [V1beta1MetricStrategy.from_dict(_item) for _item in obj["metricStrategies"]] if obj.get("metricStrategies") is not None else None,
            "objectiveMetricName": obj.get("objectiveMetricName"),
            "type": obj.get("type")
        })
        return _obj


