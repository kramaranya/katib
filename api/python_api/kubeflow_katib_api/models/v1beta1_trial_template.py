# coding: utf-8

"""
    Kubeflow Katib OpenAPI Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kubeflow_katib_api.models.v1beta1_config_map_source import V1beta1ConfigMapSource
from kubeflow_katib_api.models.v1beta1_trial_parameter_spec import V1beta1TrialParameterSpec
from typing import Optional, Set
from typing_extensions import Self

class V1beta1TrialTemplate(BaseModel):
    """
    TrialTemplate describes structure of trial template
    """ # noqa: E501
    config_map: Optional[V1beta1ConfigMapSource] = Field(default=None, description="ConfigMap spec represents a reference to ConfigMap", alias="configMap")
    failure_condition: Optional[StrictStr] = Field(default=None, description="Condition when trial custom resource is failed. Condition must be in GJSON format, ref https://github.com/tidwall/gjson. For example for BatchJob: status.conditions.#(type==\"Failed\")#|#(status==\"True\")#", alias="failureCondition")
    primary_container_name: Optional[StrictStr] = Field(default=None, description="Name of training container where actual model training is running", alias="primaryContainerName")
    primary_pod_labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels that determines if pod needs to be injected by Katib sidecar container. If PrimaryPodLabels is omitted, metrics collector wraps all Trial's pods.", alias="primaryPodLabels")
    retain: Optional[StrictBool] = Field(default=None, description="Retain indicates that trial resources must be not cleanup")
    success_condition: Optional[StrictStr] = Field(default=None, description="Condition when trial custom resource is succeeded. Condition must be in GJSON format, ref https://github.com/tidwall/gjson. For example for BatchJob: status.conditions.#(type==\"Complete\")#|#(status==\"True\")#", alias="successCondition")
    trial_parameters: Optional[List[V1beta1TrialParameterSpec]] = Field(default=None, description="List of parameters that are used in trial template", alias="trialParameters")
    trial_spec: Optional[Dict[str, Any]] = Field(default=None, description="TrialSpec represents trial template in unstructured format", alias="trialSpec")
    __properties: ClassVar[List[str]] = ["configMap", "failureCondition", "primaryContainerName", "primaryPodLabels", "retain", "successCondition", "trialParameters", "trialSpec"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1TrialTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config_map
        if self.config_map:
            _dict['configMap'] = self.config_map.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in trial_parameters (list)
        _items = []
        if self.trial_parameters:
            for _item_trial_parameters in self.trial_parameters:
                if _item_trial_parameters:
                    _items.append(_item_trial_parameters.to_dict())
            _dict['trialParameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1TrialTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configMap": V1beta1ConfigMapSource.from_dict(obj["configMap"]) if obj.get("configMap") is not None else None,
            "failureCondition": obj.get("failureCondition"),
            "primaryContainerName": obj.get("primaryContainerName"),
            "primaryPodLabels": obj.get("primaryPodLabels"),
            "retain": obj.get("retain"),
            "successCondition": obj.get("successCondition"),
            "trialParameters": [V1beta1TrialParameterSpec.from_dict(_item) for _item in obj["trialParameters"]] if obj.get("trialParameters") is not None else None,
            "trialSpec": obj.get("trialSpec")
        })
        return _obj


