# coding: utf-8

"""
    Kubeflow Katib OpenAPI Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from kubeflow_katib_api.models.v1beta1_algorithm_setting import V1beta1AlgorithmSetting
from kubeflow_katib_api.models.v1beta1_suggestion_condition import V1beta1SuggestionCondition
from kubeflow_katib_api.models.v1beta1_trial_assignment import V1beta1TrialAssignment
from typing import Optional, Set
from typing_extensions import Self

class V1beta1SuggestionStatus(BaseModel):
    """
    SuggestionStatus is the current status of a Suggestion.
    """ # noqa: E501
    algorithm_settings: Optional[List[V1beta1AlgorithmSetting]] = Field(default=None, description="AlgorithmSettings defines HP or NAS algorithm settings which suggestion gRPC service returns. These settings overwrites Experiment's settings before the gRPC request. It can be empty if settings haven't been changed.", alias="algorithmSettings")
    completion_time: Optional[datetime] = Field(default=None, description="Represents time when the Suggestion was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.", alias="completionTime")
    conditions: Optional[List[V1beta1SuggestionCondition]] = Field(default=None, description="List of observed runtime conditions for this Suggestion.")
    last_reconcile_time: Optional[datetime] = Field(default=None, description="Represents last time when the Suggestion was reconciled. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.", alias="lastReconcileTime")
    start_time: Optional[datetime] = Field(default=None, description="Represents time when the Suggestion was acknowledged by the Suggestion controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.", alias="startTime")
    suggestion_count: Optional[StrictInt] = Field(default=None, description="Number of suggestion results", alias="suggestionCount")
    suggestions: Optional[List[V1beta1TrialAssignment]] = Field(default=None, description="Suggestion results")
    __properties: ClassVar[List[str]] = ["algorithmSettings", "completionTime", "conditions", "lastReconcileTime", "startTime", "suggestionCount", "suggestions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1SuggestionStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in algorithm_settings (list)
        _items = []
        if self.algorithm_settings:
            for _item_algorithm_settings in self.algorithm_settings:
                if _item_algorithm_settings:
                    _items.append(_item_algorithm_settings.to_dict())
            _dict['algorithmSettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in suggestions (list)
        _items = []
        if self.suggestions:
            for _item_suggestions in self.suggestions:
                if _item_suggestions:
                    _items.append(_item_suggestions.to_dict())
            _dict['suggestions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1SuggestionStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithmSettings": [V1beta1AlgorithmSetting.from_dict(_item) for _item in obj["algorithmSettings"]] if obj.get("algorithmSettings") is not None else None,
            "completionTime": obj.get("completionTime"),
            "conditions": [V1beta1SuggestionCondition.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "lastReconcileTime": obj.get("lastReconcileTime"),
            "startTime": obj.get("startTime"),
            "suggestionCount": obj.get("suggestionCount"),
            "suggestions": [V1beta1TrialAssignment.from_dict(_item) for _item in obj["suggestions"]] if obj.get("suggestions") is not None else None
        })
        return _obj


